<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>テキストベースRPG</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Serif+JP:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', 'Noto Serif JP', sans-serif;
            overscroll-behavior: none;
        }
        .rpg-box {
            border: 2px solid #4a5568;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        .rpg-button {
            background-color: #2d3748;
            border: 1px solid #4a5568;
            transition: all 0.2s ease-in-out;
        }
        .rpg-button:hover {
            background-color: #4a5568;
            border-color: #718096;
            transform: translateY(-2px);
        }
        /* 画面の表示・非表示 */
        .screen {
            display: none;
            animation: fadeIn 0.5s;
        }
        .active-screen {
            display: block;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        /* スクロールバーのスタイル */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #2d3748;
        }
        ::-webkit-scrollbar-thumb {
            background: #718096;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <!-- 確認モーダル -->
    <div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-80 z-50 items-center justify-center hidden">
        <div class="bg-gray-800 p-8 rounded-lg shadow-xl max-w-md w-full rpg-box">
            <h2 id="confirmation-title" class="text-xl font-bold mb-4 text-yellow-400">確認</h2>
            <p id="confirmation-message" class="mb-6">本当に実行しますか？この操作は取り消せません。</p>
            <div class="flex justify-end gap-4">
                <button id="confirm-cancel-btn" class="rpg-button px-6 py-2 rounded-lg">キャンセル</button>
                <button id="confirm-ok-btn" class="bg-red-700 hover:bg-red-600 text-white px-6 py-2 rounded-lg">実行</button>
            </div>
        </div>
    </div>

    <!-- 初回起動モーダル -->
    <div id="first-time-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 items-center justify-center hidden">
        <div class="bg-gray-800 p-8 rounded-lg shadow-xl max-w-lg w-full rpg-box">
            <div id="new-game-selection">
                <h2 class="text-2xl font-bold mb-4 text-yellow-400">王国より</h2>
                <p class="mb-6">ようこそ、新たなる探索者よ。この世界は広大で、多くの謎と危険に満ちている。君の冒険が、この地に新たな光をもたらすことを期待している。</p>
                <p class="mb-4 font-semibold">汝の職業を選びたまえ：</p>
                <div class="flex gap-4 mb-6">
                    <button id="select-swordsman" class="rpg-button flex-1 p-4 rounded-lg text-lg">剣士</button>
                    <button id="select-mage" class="rpg-button flex-1 p-4 rounded-lg text-lg">魔導士</button>
                </div>
                <div class="text-center">
                    <button id="show-import-btn" class="text-cyan-400 hover:underline">セーブデータがありますか？</button>
                </div>
            </div>
            <div id="import-game-section" class="hidden">
                 <h2 class="text-2xl font-bold mb-4 text-yellow-400">データインポート</h2>
                 <p class="mb-4">エクスポートしたセーブデータを以下に貼り付けてください。</p>
                 <textarea id="import-data-textarea" class="w-full h-40 bg-gray-900 text-white p-2 rounded border border-gray-600"></textarea>
                 <div class="flex justify-between items-center mt-4">
                    <button id="back-to-new-game-btn" class="text-cyan-400 hover:underline">戻る</button>
                    <div>
                        <span id="import-error" class="text-red-400 mr-4"></span>
                        <button id="import-data-btn" class="rpg-button px-6 py-2 rounded-lg">インポート</button>
                    </div>
                 </div>
            </div>
        </div>
    </div>

    <!-- メインコンテンツ -->
    <div class="container mx-auto p-4 max-w-4xl">
        
        <!-- メインメニュー画面 -->
        <div id="main-menu-screen" class="screen active-screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <h1 class="text-3xl font-bold text-center mb-6 border-b-2 border-gray-600 pb-3">メインメニュー</h1>
                <!-- ステータス表示 -->
                <div id="status-display" class="mb-6 text-lg grid grid-cols-2 gap-x-4 gap-y-2">
                    <div>職業: <span id="player-class" class="font-semibold text-cyan-400"></span></div>
                    <div>レベル: <span id="player-level" class="font-semibold text-green-400"></span></div>
                    <div>経験値: <span id="player-exp" class="font-semibold text-green-400"></span></div>
                    <div>所持金: <span id="player-gold" class="font-semibold text-yellow-400"></span> G</div>
                </div>
                <!-- メインメニュー -->
                <nav class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button data-screen="kingdom" class="p-4 rounded rpg-button text-lg">王国</button>
                    <button data-screen="explore" class="p-4 rounded rpg-button text-lg">探索</button>
                    <button data-screen="party" class="p-4 rounded rpg-button text-lg">パーティ</button>
                    <button data-screen="items" class="p-4 rounded rpg-button text-lg">アイテム</button>
                    <button data-screen="options" class="p-4 rounded rpg-button text-lg">オプション</button>
                </nav>
            </div>
        </div>

        <!-- 王国 -->
        <div id="kingdom-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="main-menu" class="rpg-button px-4 py-1 rounded mb-4">← メニューへ戻る</button>
                <h2 class="text-2xl font-bold mb-4 border-b-2 border-gray-600 pb-2">王国</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <button data-screen="guild" class="p-4 rounded rpg-button text-lg">探索者協会</button>
                    <button data-screen="blacksmith" class="p-4 rounded rpg-button text-lg">鍛冶屋</button>
                    <button data-screen="general-store" class="p-4 rounded rpg-button text-lg">雑貨屋</button>
                    <button data-screen="ranch" class="p-4 rounded rpg-button text-lg">牧場</button>
                </div>
            </div>
        </div>

        <!-- 探索者協会 -->
        <div id="guild-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="kingdom" class="rpg-button px-4 py-1 rounded mb-4">← 王国へ戻る</button>
                <h2 class="text-2xl font-bold mb-4">探索者協会</h2>
                <div class="flex gap-2 mb-4">
                    <button class="rpg-button px-4 py-2 rounded-t-lg" onclick="showTab('guild-tab-1', this)">探索の心得</button>
                    <button class="rpg-button px-4 py-2 rounded-t-lg opacity-60" onclick="showTab('guild-tab-2', this)">探索状況</button>
                </div>
                <div id="guild-tab-1" class="guild-tab p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2 text-yellow-300">よう、新人！俺が探索のイロハを教えてやる。</h3>
                    <div class="space-y-4">
                        <div>
                            <h4 class="text-lg font-bold">探索について</h4>
                            <p>「探索」からフィールドを選んで冒険に出るんだ。モンスターを倒して経験値や素材、金を手に入れろ。レベルが上がれば、もっと強くなれるぜ。</p>
                        </div>
                        <div>
                            <h4 class="text-lg font-bold">装備の重要性</h4>
                            <p>「鍛冶屋」で新しい装備を買ったり、モンスターの素材で特別な装備を作ったりできる。良い装備はあんたの命を守る。金や素材を惜しむなよ。</p>
                        </div>
                        <div>
                            <h4 class="text-lg font-bold">アイテムを活用しろ</h4>
                            <p>「雑貨屋」では回復薬なんかの便利なものが手に入る。探索に行く前には準備を万端にしておけ。持ってるアイテムは「アイテム」メニューから確認できるぞ。</p>
                        </div>
                         <div>
                            <h4 class="text-lg font-bold">仲間と協力だ</h4>
                            <p>冒険は一人じゃない。「パーティ」メニューから仲間の様子を確認したり、装備を変えてやったりできる。頼りになる仲間がいれば百人力だ。</p>
                        </div>
                    </div>
                </div>
                <div id="guild-tab-2" class="guild-tab hidden p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2">各フィールドの探索状況</h3>
                    <div id="field-progress-container" class="space-y-4">
                        <!-- JSで探索状況を生成 -->
                    </div>
                </div>
            </div>
        </div>

        <!-- 鍛冶屋 -->
        <div id="blacksmith-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="kingdom" class="rpg-button px-4 py-1 rounded mb-4">← 王国へ戻る</button>
                <h2 class="text-2xl font-bold mb-4">鍛冶屋</h2>
                <p class="italic bg-gray-900 p-3 rounded-md mb-4">「へい、いらっしゃい！　ウチの武具は一級品だぜ。見ていきな！」</p>
                <div class="flex gap-2 mb-4">
                    <button class="rpg-button px-4 py-2 rounded-t-lg" onclick="showTab('blacksmith-tab-1', this)">購入</button>
                    <button class="rpg-button px-4 py-2 rounded-t-lg opacity-60" onclick="showTab('blacksmith-tab-2', this)">作成</button>
                </div>
                <div id="blacksmith-tab-1" class="blacksmith-tab p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2">購入可能な装備</h3>
                    <div id="blacksmith-purchase-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- JSでリストを生成 -->
                    </div>
                </div>
                <div id="blacksmith-tab-2" class="blacksmith-tab hidden p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2">作成可能な装備</h3>
                    <div id="blacksmith-craft-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- JSでリストを生成 -->
                    </div>
                </div>
            </div>
        </div>

        <!-- 雑貨屋 -->
        <div id="general-store-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="kingdom" class="rpg-button px-4 py-1 rounded mb-4">← 王国へ戻る</button>
                <h2 class="text-2xl font-bold mb-4">雑貨屋</h2>
                <p class="italic bg-gray-900 p-3 rounded-md mb-4">「あら、いらっしゃい。冒険に役立つものを揃えてるわよ。ゆっくり見ていってね。」</p>
                <div class="flex gap-2 mb-4">
                    <button class="rpg-button px-4 py-2 rounded-t-lg" onclick="showTab('store-tab-1', this)">購入</button>
                    <button class="rpg-button px-4 py-2 rounded-t-lg opacity-60" onclick="showTab('store-tab-2', this)">売却</button>
                </div>
                <div id="store-tab-1" class="store-tab p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2">商品リスト</h3>
                    <div id="store-purchase-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- JSでリストを生成 -->
                    </div>
                </div>
                <div id="store-tab-2" class="store-tab hidden p-4 bg-gray-900 rounded-b-lg rounded-r-lg">
                    <h3 class="text-xl font-semibold mb-2">所持アイテムを売却</h3>
                    <div id="store-sell-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <!-- JSでリストを生成 -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 牧場 -->
        <div id="ranch-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="kingdom" class="rpg-button px-4 py-1 rounded mb-4">← 王国へ戻る</button>
                <h2 class="text-2xl font-bold mb-4">牧場</h2>
                <p class="italic bg-gray-900 p-3 rounded-md mb-4">「やあ、よく来たね。ここは動物たちとのどかな時間を過ごせる場所さ。今はまだ準備中だけど、楽しみにしててくれよな！」</p>
                <p class="text-center text-2xl mt-12 text-yellow-400">🚧 現在実装中です 🚧</p>
            </div>
        </div>

        <!-- 探索 -->
        <div id="explore-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="main-menu" class="rpg-button px-4 py-1 rounded mb-4">← メニューへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">探索</h2>
                <div id="explore-field-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- JSで探索可能なフィールドを生成 -->
                </div>
            </div>
        </div>

        <!-- パーティ -->
        <div id="party-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="main-menu" class="rpg-button px-4 py-1 rounded mb-4">← メニューへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">パーティ</h2>
                <p class="text-center text-2xl mt-12 text-yellow-400">🚧 現在実装中です 🚧</p>
            </div>
        </div>

        <!-- アイテム -->
        <div id="items-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="main-menu" class="rpg-button px-4 py-1 rounded mb-4">← メニューへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">アイテム</h2>
                <p class="text-center text-2xl mt-12 text-yellow-400">🚧 現在実装中です 🚧</p>
            </div>
        </div>

        <!-- オプション -->
        <div id="options-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="main-menu" class="rpg-button px-4 py-1 rounded mb-4">← メニューへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">オプション</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <button data-screen="monster-book" class="p-4 rounded rpg-button text-lg">モンスター図鑑</button>
                    <button data-screen="export-data" class="p-4 rounded rpg-button text-lg">データのエクスポート</button>
                    <button id="reset-data-btn" class="p-4 rounded bg-red-800 hover:bg-red-700 text-lg">ゲームデータのリセット</button>
                </div>
            </div>
        </div>

        <!-- モンスター図鑑 -->
        <div id="monster-book-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="options" class="rpg-button px-4 py-1 rounded mb-4">← オプションへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">モンスター図鑑</h2>
                <div id="monster-list" class="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-[60vh] overflow-y-auto pr-2">
                    <!-- JSで図鑑を生成 -->
                </div>
            </div>
        </div>
        
        <!-- データのエクスポート -->
        <div id="export-data-screen" class="screen">
            <div class="bg-gray-800 p-6 rounded-lg rpg-box">
                <button data-screen="options" class="rpg-button px-4 py-1 rounded mb-4">← オプションへ戻る</button>
                <h2 class="text-2xl font-bold mb-4">データのエクスポート</h2>
                <p class="mb-4">以下のテキストをコピーして、別の場所に保存してください。データを復元する際に使用します。</p>
                <textarea id="export-data-textarea" readonly class="w-full h-64 bg-gray-900 text-white p-2 rounded border border-gray-600"></textarea>
                <button id="copy-data-button" class="rpg-button px-6 py-2 rounded mt-4">コピー</button>
                <span id="copy-feedback" class="ml-4 text-green-400 opacity-0 transition-opacity">コピーしました！</span>
            </div>
        </div>
    </div>

<script>
// =================================================================================
// データベース
// ゲーム内のアイテム、モンスター、レシピなどの静的データを定義します。
// 新しい要素を追加する際は、このセクションを編集してください。
// =================================================================================
const DB = {
    items: {
        'weapon001': { name: '銅の剣', type: 'weapon', price: 120, sellPrice: 60, description: 'ありふれた銅製の剣。', stats: { atk: 5 } },
        'weapon002': { name: '鉄の剣', type: 'weapon', price: 500, sellPrice: 250, description: '銅の剣より丈夫で切れ味がいい。', stats: { atk: 12 } },
        'weapon101': { name: '初心者の杖', type: 'weapon', price: 100, sellPrice: 50, description: '魔力の込められた樫の杖。', stats: { matk: 6 } },
        'armor001': { name: '皮の服', type: 'body', price: 80, sellPrice: 40, description: '動物の皮で作られた簡単な服。', stats: { def: 4 } },
        'item001': { name: '薬草', type: 'consumable', price: 20, sellPrice: 10, description: 'HPを少し回復する。' },
        'item002': { name: '魔力水', type: 'consumable', price: 50, sellPrice: 25, description: 'MPを少し回復する。' },
        'material001': { name: 'ワームの粘液', type: 'material', sellPrice: 5, description: 'ワームから採れるネバネバした液体。' },
        'material002': { name: 'ゴブリンの棍棒', type: 'material', sellPrice: 12, description: 'ゴブリンが使っていた粗末な棍棒。' },
    },
    monsters: {
        'worm': { no: 1, name: 'ワーム', race: '蟲族', habitat: '平原、洞窟', story: '土の中に生息する大型のミミズのようなモンスター。特に毒はないが、その粘液は様々な薬品の材料になる。' },
        'titan_worm': { no: 2, name: 'タイタンワーム', race: '蟲族', habitat: '汚染された土地', story: 'ワームが巨大化した亜種。強靭な外皮を持ち、並大抵の攻撃では傷一つつかないと言われている。' },
        'harpy': { no: 3, name: 'ハーピィ', race: '鳥人族', habitat: '山岳地帯', story: '女性の顔と鳥の体を持つモンスター。その歌声は船乗りを惑わせるという言い伝えがある。' },
        'goblin': { no: 4, name: 'ゴブリン', race: '亜人族', habitat: '森、洞窟', story: '知能は低いが、集団で行動する厄介なモンスター。手製の棍棒で襲いかかってくる。' },
        'goblin_archer': { no: 5, name: 'ゴブリンアーチャー', race: '亜人族', habitat: '森', story: '弓矢の扱いを覚えたゴブリン。後方からの支援射撃は、単純ながらも脅威となる。' },
        'goblin_mage': { no: 6, name: 'ゴブリンメイジ', race: '亜人族', habitat: '古代遺跡', story: 'ゴブリンの中でも特に知能の高い個体。初歩的な魔法を操り、火の玉などを放ってくる。' },
        'mega_goblin': { no: 7, name: 'メガゴブリン', race: '亜人族', habitat: 'ゴブリンの巣', story: 'ゴブリンの王とも呼ばれる巨大な個体。その怪力は岩をも砕くと恐れられている。' },
        'unknown008': { no: 8, name: '？？？', race: '？？？', habitat: '？？？', story: '未確認のモンスター。' },
        'unknown009': { no: 9, name: '？？？', race: '？？？', habitat: '？？？', story: '未確認のモンスター。' },
    },
    fields: {
        'hearts_plain': { name: 'ハーツ平原' },
        'misty_forest': { name: '霧の森' },
    },
    blacksmithPurchaseConditions: [
        { itemId: 'weapon001', condition: (gameData) => true },
        { itemId: 'armor001', condition: (gameData) => true },
        { itemId: 'weapon002', condition: (gameData) => gameData.player.level >= 5 },
    ],
    blacksmithCraftRecipes: [
        {
            itemId: 'weapon002',
            materials: [{ id: 'material002', quantity: 5 }, { id: 'material001', quantity: 10 }],
            condition: (gameData) => gameData.items.some(item => item.id === 'material002')
        }
    ],
    generalStorePurchaseConditions: [
        { itemId: 'item001', condition: (gameData) => true },
        { itemId: 'item002', condition: (gameData) => gameData.player.class === '魔導士' || gameData.player.level >= 3 },
    ],
};

// =================================================================================
// ゲームロジック
// =================================================================================
let gameData;

// --- ゲームの初期化とセーブ/ロード ---
window.onload = function() {
    loadGame();
    setupEventListeners();
    if (gameData) {
        renderAll();
        switchScreen('main-menu');
    }
};

function loadGame() {
    const savedData = localStorage.getItem('textRpgGameData');
    if (savedData) {
        gameData = JSON.parse(savedData);
    } else {
        document.getElementById('first-time-modal').style.display = 'flex';
    }
}

function saveGame() {
    if (gameData) {
        localStorage.setItem('textRpgGameData', JSON.stringify(gameData));
    }
}

function initNewGame(playerClass) {
    gameData = {
        player: {
            class: playerClass,
            level: 1,
            exp: 0,
            nextExp: 100,
            equipment: { weapon: null, head: null, body: null, legs: null, accessory: null },
        },
        party: [],
        gold: 200,
        items: [{ id: 'item001', quantity: 3 }],
        unlockedFields: ['hearts_plain'],
        fieldProgress: {
            'hearts_plain': { monsterCompletion: 0, itemCompletion: 0, mapCompletion: 0, overall: 0, rewardClaimed: false },
        },
        monsterLog: {},
    };
    Object.keys(DB.monsters).forEach(id => {
        if (!id.startsWith('unknown')) {
            gameData.monsterLog[id] = { discovered: true };
        }
    });
    saveGame();
    document.getElementById('first-time-modal').style.display = 'none';
    renderAll();
    switchScreen('main-menu');
}

function importGame() {
    const jsonString = document.getElementById('import-data-textarea').value;
    const errorSpan = document.getElementById('import-error');
    errorSpan.textContent = '';
    try {
        const importedData = JSON.parse(jsonString);
        // 簡単なデータ検証
        if (importedData && importedData.player && importedData.player.class) {
            gameData = importedData;
            saveGame();
            document.getElementById('first-time-modal').style.display = 'none';
            renderAll();
            switchScreen('main-menu');
        } else {
            throw new Error('無効なデータ形式です。');
        }
    } catch (e) {
        errorSpan.textContent = e.message;
    }
}

function resetGameData() {
    showConfirmation('本当にリセットしますか？', 'すべてのセーブデータが削除されます。', () => {
        localStorage.removeItem('textRpgGameData');
        location.reload();
    });
}

// --- UI描画関連 ---
function renderAll() {
    if (!gameData) return;
    renderStatus();
    renderScreens();
}

function renderStatus() {
    document.getElementById('player-class').textContent = gameData.player.class;
    document.getElementById('player-level').textContent = gameData.player.level;
    document.getElementById('player-exp').textContent = `${gameData.player.exp} / ${gameData.player.nextExp}`;
    document.getElementById('player-gold').textContent = gameData.gold;
}

function renderScreens() {
    renderGuild();
    renderBlacksmith();
    renderGeneralStore();
    renderExplore();
    renderMonsterBook();
    renderExportData();
}

function switchScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active-screen');
    });
    const targetScreen = document.getElementById(screenId + '-screen');
    if (targetScreen) {
        targetScreen.classList.add('active-screen');
    }
}

function showTab(tabId, clickedButton) {
    const tabContainer = clickedButton.parentElement.nextElementSibling;
    while (!tabContainer.classList.contains('guild-tab') && !tabContainer.classList.contains('blacksmith-tab') && !tabContainer.classList.contains('store-tab')) {
        tabContainer = tabContainer.nextElementSibling;
    }
    
    const tabPrefix = tabId.substring(0, tabId.indexOf('-tab-'));
    
    // 同じコンテナ内のタブボタンのスタイルをリセット
    clickedButton.parentElement.querySelectorAll('button').forEach(btn => {
        btn.classList.add('opacity-60');
    });
    // クリックされたボタンのスタイルをアクティブに
    clickedButton.classList.remove('opacity-60');

    // 同じコンテナ内のタブコンテンツを非表示に
    let currentElement = clickedButton.parentElement.nextElementSibling;
    while(currentElement && currentElement.classList.contains(`${tabPrefix}-tab`)){
        currentElement.style.display = 'none';
        currentElement = currentElement.nextElementSibling;
    }
    
    // 対象のタブコンテンツを表示
    document.getElementById(tabId).style.display = 'block';
}


function showConfirmation(title, message, onConfirm) {
    const modal = document.getElementById('confirmation-modal');
    document.getElementById('confirmation-title').textContent = title;
    document.getElementById('confirmation-message').textContent = message;
    modal.style.display = 'flex';

    const okBtn = document.getElementById('confirm-ok-btn');
    const cancelBtn = document.getElementById('confirm-cancel-btn');

    const okHandler = () => {
        onConfirm();
        cleanup();
    };

    const cancelHandler = () => {
        cleanup();
    };
    
    function cleanup() {
        modal.style.display = 'none';
        okBtn.removeEventListener('click', okHandler);
        cancelBtn.removeEventListener('click', cancelHandler);
    }

    okBtn.addEventListener('click', okHandler, { once: true });
    cancelBtn.addEventListener('click', cancelHandler, { once: true });
}


// 各画面の描画関数
function renderGuild() {
    const container = document.getElementById('field-progress-container');
    container.innerHTML = '';
    gameData.unlockedFields.forEach(fieldId => {
        const fieldInfo = DB.fields[fieldId];
        const progress = gameData.fieldProgress[fieldId];
        if (!fieldInfo || !progress) return;

        progress.overall = Math.floor((progress.monsterCompletion + progress.itemCompletion + progress.mapCompletion) / 3);

        const element = document.createElement('div');
        element.className = 'bg-gray-800 p-4 rounded';
        element.innerHTML = `
            <h4 class="text-lg font-bold">${fieldInfo.name}</h4>
            <div class="space-y-1 mt-2">
                <p>総合達成度: ${progress.overall}%</p>
                <p class="text-sm text-gray-400">図鑑: ${progress.monsterCompletion}% | アイテム: ${progress.itemCompletion}% | マップ: ${progress.mapCompletion}%</p>
            </div>
            <button class="rpg-button px-4 py-1 mt-2 rounded ${progress.overall === 100 && !progress.rewardClaimed ? '' : 'opacity-50 cursor-not-allowed'}" ${progress.overall === 100 && !progress.rewardClaimed ? '' : 'disabled'}>
                ${progress.rewardClaimed ? '報酬受取済' : '100%報酬'}
            </button>
        `;
        container.appendChild(element);
    });
}

function renderBlacksmith() {
    const purchaseContainer = document.getElementById('blacksmith-purchase-list');
    purchaseContainer.innerHTML = '';
    DB.blacksmithPurchaseConditions.forEach(cond => {
        if (cond.condition(gameData)) {
            const item = DB.items[cond.itemId];
            const element = document.createElement('div');
            element.className = 'bg-gray-700 p-3 rounded flex justify-between items-center';
            element.innerHTML = `
                <div>
                    <p class="font-semibold">${item.name}</p>
                    <p class="text-sm text-gray-400">${item.description}</p>
                </div>
                <button class="rpg-button px-4 py-2 rounded">${item.price} G</button>
            `;
            purchaseContainer.appendChild(element);
        }
    });

    const craftContainer = document.getElementById('blacksmith-craft-list');
    craftContainer.innerHTML = '';
    DB.blacksmithCraftRecipes.forEach(recipe => {
        if (recipe.condition(gameData)) {
            const item = DB.items[recipe.itemId];
            const materialsHtml = recipe.materials.map(mat => {
                const matItem = DB.items[mat.id];
                const userMat = gameData.items.find(i => i.id === mat.id) || { quantity: 0 };
                const color = userMat.quantity >= mat.quantity ? 'text-green-400' : 'text-red-400';
                return `<span class="${color}">${matItem.name} (${userMat.quantity}/${mat.quantity})</span>`;
            }).join(', ');

            const element = document.createElement('div');
            element.className = 'bg-gray-700 p-3 rounded';
            element.innerHTML = `
                <p class="font-semibold">${item.name}</p>
                <p class="text-sm text-gray-400">必要素材: ${materialsHtml}</p>
                <button class="rpg-button px-4 py-2 rounded mt-2">作成</button>
            `;
            craftContainer.appendChild(element);
        }
    });
}

function renderGeneralStore() {
    const purchaseContainer = document.getElementById('store-purchase-list');
    purchaseContainer.innerHTML = '';
    DB.generalStorePurchaseConditions.forEach(cond => {
        if (cond.condition(gameData)) {
            const item = DB.items[cond.itemId];
            const element = document.createElement('div');
            element.className = 'bg-gray-700 p-3 rounded flex justify-between items-center';
            element.innerHTML = `
                <div>
                    <p class="font-semibold">${item.name}</p>
                    <p class="text-sm text-gray-400">${item.description}</p>
                </div>
                <button class="rpg-button px-4 py-2 rounded">${item.price} G</button>
            `;
            purchaseContainer.appendChild(element);
        }
    });
    const sellContainer = document.getElementById('store-sell-list');
    sellContainer.innerHTML = '現在、売却できるアイテムはありません。';
}

function renderExplore() {
    const container = document.getElementById('explore-field-list');
    container.innerHTML = '';
    gameData.unlockedFields.forEach(fieldId => {
        const fieldInfo = DB.fields[fieldId];
        if (!fieldInfo) return;
        const element = document.createElement('button');
        element.className = 'p-6 rounded rpg-button text-xl text-center';
        element.textContent = fieldInfo.name;
        container.appendChild(element);
    });
}

function renderMonsterBook() {
    const container = document.getElementById('monster-list');
    container.innerHTML = '';
    Object.entries(DB.monsters).forEach(([id, monster]) => {
        const isDiscovered = gameData.monsterLog[id]?.discovered || false;
        const element = document.createElement('div');
        element.className = `p-4 rounded ${isDiscovered ? 'bg-gray-700' : 'bg-gray-800 border border-dashed border-gray-600'}`;
        if (isDiscovered) {
            element.innerHTML = `
                <h3 class="text-lg font-bold text-yellow-300">No.${monster.no} ${monster.name}</h3>
                <p class="text-sm">種族: ${monster.race}</p>
                <p class="text-sm">生息地: ${monster.habitat}</p>
                <p class="mt-2 text-gray-300 text-sm italic">"${monster.story}"</p>
            `;
        } else {
            element.innerHTML = `
                <h3 class="text-lg font-bold text-gray-500">No.${monster.no} ？？？</h3>
                <p class="text-sm text-gray-500">種族: ？？？</p>
                <p class="text-sm text-gray-500">生息地: ？？？</p>
            `;
        }
        container.appendChild(element);
    });
}

function renderExportData() {
    const textarea = document.getElementById('export-data-textarea');
    textarea.value = JSON.stringify(gameData, null, 2);
}

// --- イベントリスナー ---
function setupEventListeners() {
    // 初回起動
    document.getElementById('select-swordsman').addEventListener('click', () => initNewGame('剣士'));
    document.getElementById('select-mage').addEventListener('click', () => initNewGame('魔導士'));
    document.getElementById('show-import-btn').addEventListener('click', () => {
        document.getElementById('new-game-selection').style.display = 'none';
        document.getElementById('import-game-section').style.display = 'block';
    });
    document.getElementById('back-to-new-game-btn').addEventListener('click', () => {
        document.getElementById('new-game-selection').style.display = 'block';
        document.getElementById('import-game-section').style.display = 'none';
    });
    document.getElementById('import-data-btn').addEventListener('click', importGame);

    // 画面切り替え
    document.querySelectorAll('button[data-screen]').forEach(button => {
        button.addEventListener('click', () => {
            switchScreen(button.dataset.screen);
        });
    });
    
    // データコピー
    document.getElementById('copy-data-button').addEventListener('click', () => {
        const textarea = document.getElementById('export-data-textarea');
        textarea.select();
        document.execCommand('copy');
        const feedback = document.getElementById('copy-feedback');
        feedback.style.opacity = '1';
        setTimeout(() => { feedback.style.opacity = '0'; }, 2000);
    });

    // データリセット
    document.getElementById('reset-data-btn').addEventListener('click', resetGameData);
}

</script>
</body>
</html>
